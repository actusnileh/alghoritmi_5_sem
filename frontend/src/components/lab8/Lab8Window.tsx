import { FC, useState, CSSProperties } from "react";
import {
    Title,
    Divider,
    TextInput,
    Button,
    LoadingOverlay,
    Text,
} from "@mantine/core";
import axios from "axios";
import ReactFlow, { Controls, Background, Node, Edge } from "reactflow";
import "reactflow/dist/style.css";

// –°—Ç–∏–ª—å –¥–ª—è —É–∑–ª–æ–≤ –∏ —Ä—ë–±–µ—Ä
const nodeStyle = {
    width: 10,
    height: 10,
    borderRadius: "50%",
    backgroundColor: "#FFCC00",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    border: "1px solid #000",
    color: "black",
    fontSize: "12px",
};

const edgeStyle: CSSProperties = {
    stroke: "#000",
    strokeWidth: 2,
    strokeLinecap: "round", // This matches the StrokeLinecap type
    strokeLinejoin: "round",
    zIndex: 2,
};

const generateNodesAndEdges = (structure: any) => {
    const nodes: Node[] = [];
    const edges: Edge[] = [];
    let nodeCounter = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    const traverseTree = (
        node: any,
        parentId: string | null = null,
        prefix: string = "",
        xOffset: number = 0,
        yOffset: number = 0
    ) => {
        const nodeId = `node-${nodeCounter++}`;
        nodes.push({
            id: nodeId,
            data: { label: "" }, // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Ç–∫—É
            position: { x: xOffset, y: yOffset },
            style: nodeStyle,
        });

        if (parentId) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —Ç–µ–∫—É—â–µ–º—É —É–∑–ª—É
            edges.push({
                id: `e${parentId}-${nodeId}`,
                source: parentId,
                target: nodeId,
                label: prefix, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —É–∑–ª—É
                style: edgeStyle,
            });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ X –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
        let childXOffset = xOffset - 100; // —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
        const childYOffset = yOffset + 100; // —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤–∞

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        Object.keys(node.transitions).forEach((key) => {
            traverseTree(
                node.transitions[key],
                nodeId,
                prefix + key,
                childXOffset,
                childYOffset
            );
            childXOffset += 200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        });
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å –∫–æ—Ä–Ω—è
    traverseTree(structure);

    return { nodes, edges };
};

export const Lab8Window: FC = () => {
    const [strings, setStrings] = useState<string>("");
    const [loading, setLoading] = useState<boolean>(false);
    const [result, setResult] = useState<any>(null);

    const handleSubmit = async () => {
        setLoading(true);
        try {
            const stringArray = strings.split(",").map((str) => str.trim());

            const response = await axios.post(
                "http://37.128.205.70:3415/v1/lab8",
                stringArray
            );

            setResult(response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ", error);
        } finally {
            setLoading(false);
        }
    };

    const { nodes, edges } = result
        ? generateNodesAndEdges(result.structure)
        : { nodes: [], edges: [] };

    return (
        <div style={{ position: "relative" }}>
            <LoadingOverlay visible={loading} />
            <Title style={{ textAlign: "center" }}>
                üß© –ù–û–ü / –°—É—Ñ—Ñ–∏–∫—Å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            </Title>
            <Divider my="sm" />

            <TextInput
                label="–í–≤–æ–¥ —Å—Ç—Ä–æ–∫"
                value={strings}
                onChange={(e) => setStrings(e.target.value)}
                placeholder="banana, apple, cherry"
                mb={10}
            />
            <Button onClick={handleSubmit} fullWidth>
                –†–µ—à–∏—Ç—å
            </Button>
            {result && result.lcs && (
                <div style={{ marginTop: "20px", textAlign: "center" }}>
                    <Text size="lg">LCS: {result.lcs}</Text>
                </div>
            )}
            {result && (
                <div style={{ height: "500px", marginTop: "20px" }}>
                    <ReactFlow nodes={nodes} edges={edges} fitView>
                        <Controls />
                        <Background />
                    </ReactFlow>
                </div>
            )}
        </div>
    );
};
